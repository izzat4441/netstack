# Copyright 2016 The Fuchsia Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import("//build/go/go_binary.gni")

declare_args() {
  # if true, lwiperf server will run
  lwiperf = false

  # if true, use netstack2 for netstack
  netstack2 = true
}

# The final output netstack at $root_out_dir/netstack may be built from :netstack1 or :netstack2.
# To avoid confusing dependencies, especially when toggling the flag on and off, both targets build
# their executable into their own location (either $root_out_dir/netstack1 or
# $root_out_dir/netstack2), then a separate step copies the winner $root_out_dir/netstack.
group("netstack") {
  deps = [
    ":copy_selected_netstack",
    "//apps/netstack/apps",
  ]
}

copy("copy_selected_netstack") {
    if (netstack2) {
        deps = [ ":netstack2" ]
        sources = [ "$root_out_dir/netstack2" ]
    } else {
        deps = [ ":netstack1" ]
        sources = [ "$root_out_dir/netstack1" ]
    }
    outputs = [ "$root_out_dir/netstack" ]
}

if (!netstack2) {

executable("netstack1") {
  sources = [
    "dispatcher.c",
    "dispatcher.h",
    "handle_watcher.c",
    "handle_watcher.h",
    "iostate.c",
    "iostate.h",
    "main.c",
    "multiplexer.h",
    "net_init.h",
    "net_socket.h",
    "request_queue.c",
    "request_queue.h",
    "socket_functions.c",
    "socket_functions.h",
    "trace.c",
    "trace.h",
  ]

  sources += [
    "ports/lwip/eth-client.c",
    "ports/lwip/eth-client.h",
    "ports/lwip/ethernetif.c",
    "ports/lwip/ethernetif.h",
    "ports/lwip/lwip-netdb.h",
    "ports/lwip/lwip-socket.h",
    "ports/lwip/multiplexer-lwip.c",
    "ports/lwip/net_init-lwip.c",
    "ports/lwip/net_socket-lwip.c",
  ]

  defines = []

  if (is_debug) {
    defines += [ "NETSTACK_DEBUG" ]
  }

  if (lwiperf) {
    defines += [ "USE_LWIPERF" ]
  }

  libs = [
    "mxio",
    "magenta",
  ]

  deps = [
    "//third_party/lwip",
  ]
}

}

go_binary("netstack2") {
    gopackage = "apps/netstack/netstack2"
}
